
(defvar *comma* (make-symbol "comma"))
(defvar *comma-atsign* (make-symbol "comma-atsign"))
(defvar *comma-dot* (make-symbol "comma-dot"))
(defvar *bq-list* (make-symbol "bq-list"))
(defvar *bq-append* (make-symbol "bq-append"))
(defvar *bq-list** (make-symbol "bq-list*"))
(defvar *bq-nconc* (make-symbol "bq-nconc"))
(defvar *bq-clobberable* (make-symbol "bq-clobberable"))
(defvar *bq-quote* (make-symbol "bq-quote"))
(defvar *bq-quote-nil* (list *bq-quote* nil))

(defparameter *bq-simplify* nil)

(defmacro backquote (x)
  (bq-completely-process x))

(defun bq-completely-process (x)
  (let ((raw-result (bq-process x)))
    (bq-remove-tokens (if *bq-simplify*
                          (bq-simplify raw-result)
                          raw-result))))

(defun bracket (x)
  (cond ((atom x)
         (list *bq-list* (bq-process x)))
        ((eq (car x) *comma*)
         (list *bq-list* (cadr x)))
        ((eq (car x) *comma-atsign*)
         (cadr x))
        ((eq (car x) *comma-dot*)
         (list *bq-clobberable* (cadr x)))
        (t (list *bq-list* (bq-process x)))))

(defun bq-process (x)
  (cond ((atom x)
         (list *bq-quote* x))
        ((eq (car x) 'backquote)
         (bq-process (bq-completely-process (cadr x))))
        ((eq (car x) *comma*) (cadr x))
        ((eq (car x) *comma-atsign*)
         (error ",@ after `"))
        ((eq (car x) *comma-dot*)
         (error ",. after `"))
        (t (do ((p x (cdr p))
                (q nil (cons (bracket (car p)) q)))
               ((atom p)
                (cons *bq-append*
                      (nreconc q (list (list *bq-quote* p)))))
             (when (eq (car p) *comma*)
               (unless (null (cddr p)) (error "Malformed ,"))
               (return (cons *bq-append*
                             (nreconc q (list (cadr p))))))
             (when (eq (car p) *comma-atsign*)
               (error "Dotted ,@"))
             (when (eq (car p) *comma-dot*)
               (error "Dotted ,."))))))

(defun maptree (fn x)
  (if (atom x)
      (funcall fn x)
      (let ((a (funcall fn (car x)))
            (d (maptree fn (cdr x))))
        (if (and (eql a (car x)) (eql d (cdr x)))
            x
            (cons a d)))))

(defun bq-remove-tokens (x)
  (cond ((eq x *bq-list*) 'list)
        ((eq x *bq-append*) 'append)
        ((eq x *bq-nconc*) 'nconc)
        ((eq x *bq-list**) 'list*)
        ((eq x *bq-quote*) 'quote)
        ((atom x) x)
        ((eq (car x) *bq-clobberable*)
         (bq-remove-tokens (cadr x)))
        ((and (eq (car x) *bq-list**)
              (consp (cddr x))
              (null (cdddr x)))
         (cons 'cons (maptree #'bq-remove-tokens (cdr x))))
        (t (maptree #'bq-remove-tokens x))))
